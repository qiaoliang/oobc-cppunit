# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = ./ut/lib/gtest-1.6.0

# Where to find user code.
USER_DIR = ./src

OBJ_DIR = ./output/ut
PRODUCT_OBJ_DIR = ./output/bin
MAIN_OBJ = $(PRODUCT_OBJ_DIR)/Main.o

EXTENSION = cpp 

UT_INCLUDE_DIR = ./ut/include
UT_SRC_DIR = ./ut/src

PRODUCT_INCLUDE_DIR = ./include
PRODUCT_SRC_DIR = ./src

# Flags passed to the preprocessor.
CPPFLAGS += -I$(GTEST_DIR)/include -I$(GTEST_DIR)/include/gtest -I$(UT_INCLUDE_DIR) -I$(PRODUCT_INCLUDE_DIR)

# Flags passed to the C++ compiler.
CXXFLAGS += -O2 -w -Wextra -lrt 

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : ut product

clean :
	rm -f $(OBJ_DIR)/* $(PRODUCT_OBJ_DIR)/*.*

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(wildcard $(GTEST_DIR)/src/*.cc) $(wildcard $(GTEST_DIR)/src/*.h) $(wildcard $(GTEST_HEADERS))

GTEST_OUTPUT = ./output/ut

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.

$(GTEST_OUTPUT)/gtest-all.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c $(GTEST_DIR)/src/gtest-all.cc -o $@

$(GTEST_OUTPUT)/gtest_main.o : $(GTEST_SRCS_)
	$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c $(GTEST_DIR)/src/gtest_main.cc -o $@

$(GTEST_OUTPUT)/gtest.a : $(GTEST_OUTPUT)/gtest-all.o
	$(AR) $(ARFLAGS) $(GTEST_OUTPUT)/$@ $^

$(GTEST_OUTPUT)/gtest_main.a : $(GTEST_OUTPUT)/gtest-all.o $(GTEST_OUTPUT)/gtest_main.o
	$(AR) $(ARFLAGS) $@ $^


gtest : $(GTEST_OUTPUT)/gtest_main.a

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.
UT_SRC = $(wildcard $(UT_SRC_DIR)/*.$(EXTENSION))
PRODUCT_SRC = $(wildcard $(PRODUCT_SRC_DIR)/*.$(EXTENSION))
UT_HEADER = $(wildcard $(UT_INCLUDE_DIR)/*.h)
PRODUCT_HEADER = $(wildcard $(PRODUCT_INCLUDE_DIR)/*.h)

UT_OBJS = $(patsubst $(UT_SRC_DIR)/%.$(EXTENSION), $(OBJ_DIR)/%.o,$(wildcard $(UT_SRC_DIR)/*.$(EXTENSION)))
PRODUCT_OBJS = $(patsubst $(PRODUCT_SRC_DIR)/%.$(EXTENSION), $(PRODUCT_OBJ_DIR)/%.o,$(wildcard $(PRODUCT_SRC_DIR)/*.$(EXTENSION)))
PRODUCT_FOR_UT = $(filter-out $(MAIN_OBJ), $(PRODUCT_OBJS))


$(OBJ_DIR)/%.o : $(UT_SRC_DIR)/%.$(EXTENSION)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -I$(UT_INCLUDE_DIR) -I$(PRODUCT_INCLUDE_DIR) -o $@

$(PRODUCT_OBJ_DIR)/%.o : $(PRODUCT_SRC_DIR)/%.$(EXTENSION)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $< -I$(PRODUCT_INCLUDE_DIR) -o $@
	
ut : $(UT_SRC) $(PRODUCT_FOR_UT) $(GTEST_OUTPUT)/gtest_main.a 
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -pthread $^ -o $(OBJ_DIR)/$@

product : $(PRODUCT_OBJS)
	$(CXX) $(CPPFLAGS) $(CXXFLAGS) -pthread $^ -o $(PRODUCT_OBJ_DIR)/$@
